---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "name" . }}
  labels:
    app.kubernetes.io/name: {{ template "name" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "name" . }}
    spec:
      containers:
      - name: main
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
        {{- if or (.Values.db.enabled.helm) (.Values.db.enabled.crossplane.local) (.Values.db.enabled.crossplane.google) (.Values.db.enabled.crossplane.aws) (.Values.db.enabled.crossplane.azure) }}
        env: 
        - name: DB_ENDPOINT
          {{- if (.Values.db.enabled.crossplane.local) }}
          value: {{ .Values.db.id }}-postgresql
          {{- end }}
          {{- if (.Values.db.enabled.helm) }}
          value: {{ template "name" . }}-postgresql
          {{- end }}
          {{- if or (.Values.db.enabled.crossplane.aws) (.Values.db.enabled.crossplane.azure) (.Values.db.enabled.crossplane.google) }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.id }}
              key: endpoint
          {{- end }}
        - name: DB_PORT
          {{- if or (.Values.db.enabled.helm) (.Values.db.enabled.crossplane.local) }}
          value: "5432"
          {{- end }}
          {{- if or (.Values.db.enabled.crossplane.aws) (.Values.db.enabled.crossplane.azure) (.Values.db.enabled.crossplane.google) }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.id }}
              key: port
          {{- end }}
        - name: DB_USER
          {{- if or (.Values.db.enabled.helm) (.Values.db.enabled.crossplane.local) }}
          value: postgres
          {{- end }}
          {{- if or (.Values.db.enabled.crossplane.aws) (.Values.db.enabled.crossplane.azure) (.Values.db.enabled.crossplane.google) }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.id }}
              key: username
          {{- end }}
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              {{- if or (.Values.db.enabled.crossplane.google) (.Values.db.enabled.crossplane.aws) (.Values.db.enabled.crossplane.azure) }}
              name: {{ .Values.db.id }}
              key: password
              {{- end }}
              {{- if .Values.db.enabled.helm }}
              name: {{ template "name" . }}-postgresql
              key: postgres-password
              {{- end }}
              {{- if .Values.db.enabled.crossplane.local }}
              name: {{ .Values.db.id }}-postgresql
              key: postgres-password
              {{- end }}
        - name: DB_NAME
          value: {{ .Values.db.id }}
        {{- if .Values.fga.enabled }}
        - name: FGA_API_URL
          value: http://openfga.openfga:8080
        - name: FGA_STORE_ID
          value: {{ .Values.fga.storeId }}
        - name: FGA_MODEL_ID
          value: {{ .Values.fga.modeId }}
        {{- end }}
        {{- end }}
      {{- if .Values.otel.enabled }}
      - image: otel/autoinstrumentation-go
        name: instrumentation
        env:
          - name: OTEL_GO_AUTO_TARGET_EXE
            value: /usr/local/bin/cncf-demo
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: {{ .Values.otel.jaegerAddr }}
          - name: OTEL_SERVICE_NAME
            value: {{ template "name" . }}
          - name: OTEL_PROPAGATORS
            value: tracecontext,baggage
        securityContext:
          privileged: true
          runAsUser: 0
      shareProcessNamespace: true
      {{- end }}
